// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  credits       Int      @default(100)
  likes         Like[]  // Many to many relationship between users and songs liked (requires a join table)
  songs         Song[]  // One to many relationship between users and songs

  @@unique([email])
  @@map("user")
}

model Song {
  id                String    @id @default(cuid())
  title             String
  s3Key             String?
  thumbnails3Key    String?
  status            String    @default("queued")
  instrumental      Boolean   @default(false)
  prompt            String?
  lyrics            String?
  fullDescribedSong String?
  describedLyrics   String?
  guidanceScale     Float?
  inferStep         Float?
  audioDuration     Float?    
  published         Boolean   @default(false)
  listenCount       Int  @default(0)
  seed              Int  @default(42)
  likes             Like[]                            // Many to many relationship between users and songs (requires a join table)
  categories        Category[]                        // Many to many relationship between users and songs (requires a join table)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  // One to many relationship, if user is deleted song is deleted
  userId String

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt


  @@index([s3Key])                                                            // Quick lookup of s3 keys with extra storage cost
}

model Like {  // Join table
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // delete like if user is deleted
  userId String
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade) // delete like if song is deleted
  songId String

  @@id([userId, songId])
}

model Category { // Join table many to many relationship (one category can have many songs and one song can have many categories)
  id                String    @id @default(cuid())
  name              String    @unique
  songs             Song[]


}
 

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
